name: CI/CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
    # ----------------------------
  # Unit tests
  # ----------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -v

  # ----------------------------
  # Version bump
  # ----------------------------
  version-bump:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.bump.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump type
        id: bump_type
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"

          bump="patch"
          if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE"; then bump="major"; fi
          if echo "$COMMIT_MSG" | grep -Eiq '^feat(\(|:)?'; then bump="minor"; fi
          if echo "$COMMIT_MSG" | grep -Eiq '^fix(\(|:)?'; then bump="patch"; fi

          echo "bump=$bump" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        id: bump
        run: |
          CURRENT=$(cat VERSION.txt)
          echo "Current version: $CURRENT"
          bump=${{ steps.bump_type.outputs.bump }}

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          case "$bump" in
          major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0;;
          minor) MINOR=$((MINOR+1)); PATCH=0;;
          patch) PATCH=$((PATCH+1));;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > VERSION.txt
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add VERSION.txt
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Show new version
        run: echo "Version bumped to ${{ steps.bump.outputs.version }}"

  # ----------------------------
  # Build Docker images
  # ----------------------------
  build:
    runs-on: ubuntu-latest
    needs: version-bump
    env:
      VERSION: ${{ needs.version-bump.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build

  # ----------------------------
  # Deploy stack locally
  # ----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy stack with Docker Compose
        run: |
          docker compose up -d